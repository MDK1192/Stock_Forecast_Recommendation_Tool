shiny::runApp()
runApp()
runApp()
runApp()
print("klappt")
print("klappt")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data_plot <- data.frame("Date"=index(AACG), "Values" = AACG$AACG.Adjusted)
data_plot <- data.frame("Date"=index(AACG), "Values" = AACG$AACG.Adjusted)
data_plot <- data.frame("Date"=index(AACG), "Values" = AACG$AACG.Adjusted)
shiny::runApp()
runApp()
runApp()
stocks_picked$Symbol[input$stockOverview_rows_selected] %in% ls(envir = .GlobalEnv)
stocks_picked$Symbol[input$stockOverview_rows_selected]
ls(envir = .GlobalEnv)
runApp()
runApp()
runApp()
runApp()
runApp()
View(data_stock)
runApp()
input$horizonslider
str(input$horizonslider)
data_fc  <- xts(x=data_stock)
data_fc[5]
data_fc[,5]
data_fc[,6]
runApp()
runApp()
runApp()
View(data_fc)
runApp()
runApp()
runApp()
length(dates)
length(data_fc)
dates <- seq.Date(from=min(index(data_fc)), to=max(index(data_fc)), by="days")
fc_meanf_xts <- xts(x=fc_meanf, order.by=dates)
runApp()
runApp()
View(data_fc)
length(dates)
length(data_fc)
nrow(data_fc)
length(data_fc)
length(dates)
length(dates)
length(xts)
data_fc <- na.locf(merge(xts, data_fc, join = "left"))
nrow(data_fc)
View(data_fc)
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
View(data)
View(data)
runApp()
View(data_fc_merged)
View(data_fc_merged)
View(trace_0)
View(data_fc)
runApp()
View(data_fc_merged)
runApp()
shiny::runApp()
install.packages("rvest")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(ggplot2)
library(plotly)
library(xts)
library(zoo)
library(quantmod)
library(dplyr)
# library(Quandl)
library(forecast)
#library(RCrawler)
library(DT)
library(rvest)
runApp()
Sys.info()
version
version
shiny::runApp()
install.packages("packrat")
runApp()
detach("package:shiny", unload = TRUE)
remove.packages("shiny", lib="~/R/win-library/3.6")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
library(shiny)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(plotly)
library(xts)
library(zoo)
library(quantmod)
library(dplyr)
# library(Quandl)
library(forecast)
#library(RCrawler)
library(DT)
library(rvest)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(plotly)
library(xts)
library(zoo)
library(quantmod)
library(dplyr)
# library(Quandl)
library(forecast)
#library(RCrawler)
library(DT)
library(rvest)
library(shiny)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
