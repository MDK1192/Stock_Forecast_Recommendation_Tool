}
data_temp <- ACBI
symbols <- stockSymbols("NASDAQ")[,c(1:2)]
symbols <- na.omit(symbols)
#todo: whole nasdaq there choose what to pick?
for (i in 1:length(symbols$Symbol)){
try(getSymbols(symbols$Symbol[i], from = "2019-01-01", auto.assign = T))
}
data <- data.frame("Date"=index(AEY), "Values" = AEY$AEY.Adjusted)
plot_ly(data, x = ~Date, y = ~AEY.Adjusted, type = 'scatter', mode = 'lines',
line = list(color = "rgb(0, 0, 0)")) %>%
layout(title = "Date",
xaxis = list(title = "Date",
zeroline = FALSE),
yaxis = list(title = "Price",
zeroline = FALSE))
train <- window(AEY$AEY.Adjusted, start=min(index(AEY)) , end = (max(index(AEY) - 12)))
n=36
meanf(train,h=n)$mean
naive(train,h=n)$mean
snaive(train,h=n)$mean
rwf(train,h=n)$mean
croston(train,h=n)$mean
stlf(train,h=n)$mean
ses(train,h=n)$mean
holt(train,h=n)$mean
hw(train,h=n)$mean
splinef(train,h=n)$mean
thetaf(train,h=n)$mean
a <- ets(train) %>% forecast(h = n)
b <- tbats(train) %>% forecast(h = n)
c <- auto.arima(train) %>% forecast(h = n)
accuracy(meanf(train,h=n)$mean, AEY$AEY.Adjusted[(length(AEY$AEY.Adjusted) - (n-1)) :length(AEY$AEY.Adjusted)])
accuracy(naive(train,h=n)$mean, AEY$AEY.Adjusted[(length(AEY$AEY.Adjusted) - (n-1)) :length(AEY$AEY.Adjusted)])
accuracy(snaive(train,h=n)$mean, AEY$AEY.Adjusted[(length(AEY$AEY.Adjusted) - (n-1)) :length(AEY$AEY.Adjusted)])
accuracy(rwf(train,h=n)$mean, AEY$AEY.Adjusted[(length(AEY$AEY.Adjusted) - (n-1)) :length(AEY$AEY.Adjusted)])
accuracy(croston(train,h=n)$mean, AEY$AEY.Adjusted[(length(AEY$AEY.Adjusted) - (n-1)) :length(AEY$AEY.Adjusted)])
accuracy(stlf(train,h=n)$mean, AEY$AEY.Adjusted[(length(AEY$AEY.Adjusted) - (n-1)) :length(AEY$AEY.Adjusted)])
accuracy(ses(train,h=n)$mean, AEY$AEY.Adjusted[(length(AEY$AEY.Adjusted) - (n-1)) :length(AEY$AEY.Adjusted)])
accuracy(holt(train,h=n)$mean, AEY$AEY.Adjusted[(length(AEY$AEY.Adjusted) - (n-1)) :length(AEY$AEY.Adjusted)])
accuracy(hw(train,h=n)$mean, AEY$AEY.Adjusted[(length(AEY$AEY.Adjusted) - (n-1)) :length(AEY$AEY.Adjusted)])
accuracy(splinef(train,h=n)$mean, AEY$AEY.Adjusted[(length(AEY$AEY.Adjusted) - (n-1)) :length(AEY$AEY.Adjusted)])
accuracy(thetaf(train,h=n)$mean, AEY$AEY.Adjusted[(length(AEY$AEY.Adjusted) - (n-1)) :length(AEY$AEY.Adjusted)])
accuracy(a$mean, AEY$AEY.Adjusted[(length(AEY$AEY.Adjusted) - (n-1)) :length(AEY$AEY.Adjusted)])
accuracy(b$mean, AEY$AEY.Adjusted[(length(AEY$AEY.Adjusted) - (n-1)) :length(AEY$AEY.Adjusted)])
accuracy(c$mean, AEY$AEY.Adjusted[(length(AEY$AEY.Adjusted) - (n-1)) :length(AEY$AEY.Adjusted)])
https://robjhyndman.com/hyndsight/tscv/
e <- tsCV(train, ses, h=365)
View(e)
h_vec <- seq(10, 360, 10)
h_vec
for(i in h_vec){
print(i)
}
df_fc_acc
df_fc_acc <- data.frame("h_vec" = h_vec, "meanf" = NULL, "ses"=NULL)
df_fc_acc <- data.frame("h_vec" = h_vec, "meanf" = as.numeric(), "ses"=as.numeric())
df_fc_acc <- data.frame("h_vec" = h_vec, "meanf" = NA, "ses"=NA)
df_fc_acc
https://robjhyndman.com/hyndsight/tscv/
e <- tsCV(train, ses, h=365)
View(e)
train <- window(AEY$AEY.Adjusted, start=min(index(AEY)) , end = (max(index(AEY) - 36)))
https://robjhyndman.com/hyndsight/tscv/
e <- tsCV(train, ses, h=36)
View(e)
View(ATRS)
nrow(AEY)
View(e)
https://robjhyndman.com/hyndsight/tscv/
e <- tsCV(train, ses, h=36)
View(e)
train <- window(AEY$AEY.Adjusted, start=min(index(AEY)) , end = (max(index(AEY) - 360)))
train <- window(AEY$AEY.Adjusted, start=min(index(AEY)) , end = (max(index(AEY) - 360)))
train <- window(AEY$AEY.Adjusted, start=min(index(AEY)) , end = (max(index(AEY) - 360)))
for(i in h_vec){
a <- meanf(train,h=i)$mean
b <- ses(train,h=i)$mean
browser()
#df_fc_acc$meanf[df_fc_acc$h_vec == i] <- max()
}
a
train <- window(AEY$AEY.Adjusted, start=min(index(AEY)) , end = (max(index(AEY) - 360)))
test <- window(AEY$AEY.Adjusted, start=max(index(AEY) - 359))
nrow(AEY)
nrow(train)
nrow(test)
nrow(test) + nrow(train)
for(i in h_vec){
a <- meanf(train,h=i)$mean
b <- ses(train,h=i)$mean
df_fc_acc$meanf[df_fc_acc$h_vec == i] <- sqrt(mean(((test-max(a))^2), na.rm=TRUE))
df_fc_acc$ses[df_fc_acc$h_vec == i] <- sqrt(mean(((test-max(b))^2), na.rm=TRUE))
browser()
}
df_fc_acc
a
test
test[10]
test[10] - max(a)
test[10] - max(a)
sqrt((test[10] - max(a))^2)
sqrt((test[10] - max(a))^2)
df_fc_acc
for(i in h_vec){
a <- meanf(train,h=i)$mean
b <- ses(train,h=i)$mean
df_fc_acc$meanf[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(a))^2)
df_fc_acc$ses[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(b))^2)
browser()
}
for(i in h_vec){
a <- meanf(train,h=i)$mean
b <- ses(train,h=i)$mean
df_fc_acc$meanf[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(a))^2)
df_fc_acc$ses[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(b))^2)
browser()
}
sqrt((test[10] - max(a))^2)
df_fc_acc
sqrt((test[20] - max(a))^2)
sqrt((test[20] - max(b))^2)
for(i in h_vec){
a <- meanf(train,h=i)$mean
b <- ses(train,h=i)$mean
df_fc_acc$meanf[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(a))^2)
df_fc_acc$ses[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(b))^2)
}
for(i in h_vec){
a <- meanf(train,h=i)$mean
b <- ses(train,h=i)$mean
df_fc_acc$meanf[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(a))^2)
df_fc_acc$ses[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(b))^2)
}
for(i in h_vec){
a <- meanf(train,h=i)$mean
b <- ses(train,h=i)$mean
df_fc_acc$meanf[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(a))^2)
df_fc_acc$ses[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(b))^2)
}
for(i in h_vec){
a <- meanf(train,h=i)$mean
b <- ses(train,h=i)$mean
df_fc_acc$meanf[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(a))^2)
df_fc_acc$ses[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(b))^2)
browser()
}
df_fc_acc
df_fc_acc
for(i in h_vec){
a <- meanf(train,h=i)$mean
b <- ses(train,h=i)$mean
df_fc_acc$meanf[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(a))^2)
df_fc_acc$ses[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(b))^2)
browser()
}
df_fc_acc
df_fc_acc
df_fc_acc
df_fc_acc
df_fc_acc
df_fc_acc
df_fc_acc
df_fc_acc
df_fc_acc
nrow(test)
test <- window(AEY$AEY.Adjusted, start=max(index(AEY) - 359))
nrow(test)
nrow(AEY)
index(AEY)
nrow(train)
train <- window(AEY$AEY.Adjusted, start=min(index(AEY)), end = (max(index(AEY)) - 360))
nrow(train)
train <- window(AEY$AEY.Adjusted, start=min(index(AEY)), end = (max(index(AEY)) - 360))
nrow(train)
nrow(AEY)
nrow(test)
max(index(AEY)) - 360)
max(index(AEY)) - 360
min(index(AEY))
train
max(index(AEY)) - 359
test <- window(AEY$AEY.Adjusted, start=max(index(AEY)) - 359)
test
#todo: whole nasdaq there choose what to pick?
for (i in 1:length(symbols$Symbol)){
try(getSymbols(symbols$Symbol[i], from = "2017-01-01", auto.assign = T))
}
train <- window(AEY$AEY.Adjusted, start=min(index(AEY)), end = (max(index(AEY)) - 360))
test <- window(AEY$AEY.Adjusted, start=max(index(AEY)) - 359)
train <- window(AEY$AEY.Adjusted, start=min(index(AEY)), end = (max(index(AEY)) - 360))
test <- window(AEY$AEY.Adjusted, start=max(index(AEY)) - 359)
for(i in h_vec){
a <- meanf(train,h=i)$mean
b <- ses(train,h=i)$mean
df_fc_acc$meanf[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(a))^2)
df_fc_acc$ses[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(b))^2)
browser()
}
df_fc_acc
for(i in h_vec){
a <- meanf(train,h=i)$mean
b <- ses(train,h=i)$mean
df_fc_acc$meanf[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(a))^2)
df_fc_acc$ses[df_fc_acc$h_vec == i] <- sqrt((test[i]-max(b))^2)
}
nrow(test)
nrow(train)
test <- window(AEY$AEY.Adjusted, start=max(index(AEY)) - 359)
test
nrow(test)
length(test)
test[1]
test[249]
install.packages("imputeTS")
miss <- xts(matrix(1*NA,1,NCOL(AEY)), first(index(AEY))-60)
View(miss)
library(tsibble)
install.packages("tsibble")
install.packages("tsibble")
library(tsibble)
d <- fill_gaps(AEY)
str(AEY)
d <- fill_gaps(train)
dates <- seq(min(index(AEY)), max(index(AEY)), by="days")
dates <- seq(min(index(AEY)), max(index(AEY)), by="days")
dates <- seq(min(index(AEY)), max(index(AEY)))
dates <- seq(min(index(AEY)), max(index(AEY)), by="days")
dates
dates <- seq.Date(from=min(index(AEY)), to=max(index(AEY)))
detach(tsibble)
detach(tsibble)
dates <- seq.Date(from=min(index(AEY)), to=max(index(AEY)), by="days")
shiny::runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
shiny::runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(data_fc)
View(data_fc)
View(xts)
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
if(input$trainslider != 0){trace_train <- data.frame(date=index(data_fc), coredata(data_fc[,7]))}
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
data.frame(date=index(data_fc_train), coredata(data_fc_train[,7]))
data.frame(date=index(data_fc), coredata(data_fc[,7]))
subset(b, !(y %in% a$x))
subset(data_fc, !(index(data_fc_train %in% data_fc)))
subset(data_fc, !(index(data_fc %in% data_fc_train)))
data.frame(date=index(data_fc), coredata(data_fc[,7]))
View(data_fc)
View(data_fc)
View(data_fc_train)
data.frame(date=index(data_fc), coredata(data_fc[,6]))
trace_train <- data.frame(date=index(data_fc), coredata(data_fc[,6]))
trace_train <- subset(trace_0, !(trace_0$date %in% trace_train$date))
View(trace_train)
View(trace_0)
View(trace_train)
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(trace_0)
View(trace_train)
View(data_fc)
View(data_fc_train)
View(data_fc)
trace_train <- data.frame(date=index(data_fc), coredata(data_fc[,6]))
trace_train <- subset(trace_0, !(trace_train$date %in% trace_0$date))
View(trace_train)
View(trace_0)
View(trace_train)
View(trace_train)
View(trace_0)
View(trace_0)
View(trace_train)
dates <- seq.Date(from=max(index(data_fc_train)) + 1, to=max(index(data_fc_train)) + input$horizonslider, by="days")
data_fc  <- xts(x=data_stock)
dates <- seq.Date(from=min(index(data_fc)), to=max(index(data_fc)) - input$trainslider, by="days")
xts <- xts(x=rep(NA, length(dates)), order.by=dates)
data_fc_train <- na.locf(merge(xts, data_fc, join = "left"))
View(data_fc_train)
View(data_fc)
trace_0 <- data.frame(date=index(data_fc_train), coredata(data_fc_train[,7]))
View(trace_0)
if(input$trainslider != 0){
trace_train <- data.frame(date=index(data_fc), coredata(data_fc[,6]))
trace_train <- subset(trace_0, !(trace_train$date %in% trace_0$date))
}
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(fc_meanf_xts)
View(data_fc_train)
View(fc_ets_xts)
View(data_fc_train)
View(data_fc_train)
View(data_fc)
View(data_fc)
View(data_fc_train)
View(trace_train)
View(trace_train)
View(trace_0)
View(trace_train)
View(trace_0)
View(data_fc)
View(data_fc_train)
View(trace_0)
View(trace_train)
trace_train <- subset(data_fc, !(data_fc_train$date %in% data_fc$date))
View(trace_train)
trace_train <- subset(data_fc, !(data_fc$date %in% data_fc_train$date))
trace_train <- data.frame(date=index(data_fc), coredata(data_fc[,6]))
View(trace_train)
View(trace_0)
trace_train <- subset(trace_0, !(trace_train$date %in% trace_0$date))
View(trace_train)
View(trace_0)
View(trace_train)
View(trace_0)
trace_train <- data.frame(date=index(data_fc), coredata(data_fc[,6]))
View(trace_train)
View(trace_0)
trace_train$date %in% trace_0$date
trace_0$date %in% trace_train$date
trace_train <- subset(trace_0, !(trace_0$date %in% trace_train$date))
View(trace_train)
trace_train <- data.frame(date=index(data_fc), coredata(data_fc[,6]))
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(trace_train)
View(trace_0)
trace_train <- anti_join(trace_train, trace_0)
View(trace_0)
View(trace_train)
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(trace_0)
View(trace_train)
View(trace_0)
View(trace_train)
runApp()
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
anti_join(data_fc, data_fc_train)
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
anti_join(data_fc, data_fc_train)
d <- anti_join(data_fc, data_fc_train)
anti_join(as.data.frame(data_fc), as.data.frame(data_fc_train))
anti_join(as.data.frame(data_fc), as.data.frame(data_fc_train))
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(acc_fc_meanf)
accuracy(fc_meanf[1:length(train_ts[,7])], train_ts[,7])
fc_meanf[1:length(train_ts[,7])]
length(train_ts[,7])
nrow(train_ts[,7])
train_ts[,7]
View(train_ts)
View(acc_fc_meanf)
acc_fc_meanf
acc_fc_meanfaccuracy(naive(train,h=n)$mean, AEY$AEY.Adjusted[(length(AEY$AEY.Adjusted) - (n-1)) :length(AEY$AEY.Adjusted)])
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
ets(data_fc_train[,7]) %>% forecast(h = input$horizonslider)$mean
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(acc_df)
View(acc_fc_arima)
View(acc_fc_arima)
acc_df <- rbind(acc_fc_meanf, acc_fc_naive, acc_fc_snaive, acc_fc_rwf, acc_fc_ses,
acc_fc_holt, acc_fc_splinef, acc_fc_thetaf, acc_fc_ets, acc_fc_tbats,
acc_fc_arima, acc_fc_nnetar)
View(acc_df)
acc_df <- as.data.frame(rbind(acc_fc_meanf, acc_fc_naive, acc_fc_snaive, acc_fc_rwf, acc_fc_ses,
acc_fc_holt, acc_fc_splinef, acc_fc_thetaf, acc_fc_ets, acc_fc_tbats,
acc_fc_arima, acc_fc_nnetar))
acc_df$Model <- c("meanf", "naive", "snaive", "rwf","ses", "holt","splinef","thetaf", "ets", "tbats", "autoarima", "nnetar")
View(acc_df)
names(acc_df)
acc_df <- acc_df[, c("Model","ME","RMSE","MAE","MPE","MAPE")]
View(acc_fc_arima)
View(acc_df)
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
row.names(acc_df)
row.names(acc_df) <- c("meanf", "naive", "snaive", "rwf","ses", "holt","splinef","thetaf", "ets", "tbats", "autoarima", "nnetar")
row.names(acc_df)
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
top_scores_RMSE <- order(acc_df$RMSE)
top_scores_RMSE <- acc_df$RMSE[order(acc_df$RMSE)]
top_scores_RMSE <- data.frame(acc_df$RMSE[order(acc_df$RMSE)])
View(top_scores_RMSE)
top_scores_RMSE <- data.frame(acc_df[order(acc_df$RMSE),])
View(top_scores_RMSE)
top_scores_RMSE <- data.frame(acc_df[order(acc_df$RMSE),])$RMSE
top_scores_RMSE <- data.frame(acc_df[order(acc_df$RMSE),])[,2]
top_scores_RMSE <- data.frame(acc_df[order(acc_df$RMSE),])
View(top_scores_RMSE)
View(top_scores_RMSE)
models <- row.names(top_scores_RMSE[1:3,])
for(i in 1: length(multiplier)){
print(i)
}
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
paste0("fc_",models[i])
get(paste0("fc_",models[i]), envir = .GlobalEnv)
get(paste0("fc_",models[i]))
ensemble_fc <- seq(0, 1, length(fc_meanf))
ensemble_fc <- seq(0, 1, length(fc_meanf))
ensemble_fc <- seq(0, 1, 50
ensemble_fc <- seq(0, 1, 50)
ensemble_fc <- seq(0, 1, 50)
ensemble_fc <- seq(1, 50)
ensemble_fc <- seq(0 ,1, 50)
rep(0, 50)
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
model_fc <- as.numeric(get(paste0("fc_",models[i])))
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
ensemble_fc
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
ensemble_fc + model_fc_weighted
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
fc_ets <- ets(data_fc_train[,7]) %>% forecast(h = input$horizonslider)$mean
fc_ets <- ets(data_fc_train[,7]) %>% forecast(h = input$horizonslider)
str(fc_ets)
fc_ets <- ets(data_fc_train[,7]) %>% forecast(h = input$horizonslider)[1]
fc_ets <- ets(data_fc_train[,7]) %>% forecast(h = input$horizonslider)[1]
fc_ets <- ets(data_fc_train[,7]) %>% forecast(h = input$horizonslider)[[1]]
fc_ets <- ets(data_fc_train[,7]) %>% forecast(h = input$horizonslider)
fc_ets$mean
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(data_plot)
View(data_plot)
plot_ly(data_plot, x = ~Date, y = ~MACD, type = 'scatter', mode = 'lines',
line = list(color = "rgb(0, 0, 0)")) %>% layout(title = "Date", xaxis = list(title = "Date", zeroline = FALSE), yaxis = list(title = "Price", zeroline = FALSE))
plot_ly(data_plot, x = ~Date, y = ~MACD, type = 'scatter', mode = 'lines',
line = list(color = "rgb(0, 0, 0)"))
plot_ly(data_plot, x = ~Date, y = ~MACD, type = 'scatter', mode = 'lines'))
plot_ly(data_plot, x = ~Date, y = ~MACD, type = 'scatter', mode = 'lines')
View(data_plot)
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
data_plot$MACD[is.na(data_plot$MACD)] <- 0
View(data_plot)
View(data_plot)
plot_ly(data_plot, x = ~Date, y = ~MACD, type = 'scatter', mode = 'lines',
line = list(color = "rgb(0, 0, 0)")) %>% layout(title = "Date", xaxis = list(title = "Date", zeroline = FALSE), yaxis = list(title = "Price", zeroline = FALSE))})
output$plotIndRSI <- renderPlotly({plot_ly(data_plot, x = ~Date, y = ~RSI, type = 'scatter', mode = 'lines',
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(data_plot)
data_plot$MACD <- MACD(data_plot$Adjusted, nFast = 12, nSlow = 26)
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(data_plot)
ggplot(data_plot, aes(x=Date, y= MACD)) + geom_line()
ggplot(data_plot, aes(x=Date, y= MACD)) + geom_line()
ggplot(data_plot, aes(x=Date, y= MACD)) + geom_line()
data_plot$MACD[is.na(data_plot$MACD)] <- 0
data_plot$MACD[is.na(data_plot$MACD)] <- 0
ggplot(data_plot, aes(x=Date, y= MACD)) + geom_line()
View(data_plot)
length(MACD)
nrow(MACD)
length(data_plot$MACD)
nrow(data_plot)
MACD <- MACD(data_plot$Adjusted)
View(MACD)
MACD(data_plot$Adjusted)[,1]
data_plot$MACD <- MACD(data_plot$Adjusted)[,1]
names(data_plot) <- c("Date", "Adjusted", "RSI", "MACD")
output$plotIndCore <- renderPlotly({plot_ly(data_plot, x = ~Date, y = ~Adjusted, type = 'scatter', mode = 'lines',
line = list(color = "rgb(0, 0, 0)")) %>% layout(title = "Date", xaxis = list(title = "Date", zeroline = FALSE), yaxis = list(title = "Price", zeroline = FALSE))})
output$plotIndMACD <- renderPlotly({plot_ly(data_plot, x = ~Date, y = ~MACD, type = 'scatter', mode = 'lines',
line = list(color = "rgb(0, 0, 0)")) %>% layout(title = "Date", xaxis = list(title = "Date", zeroline = FALSE), yaxis = list(title = "Price", zeroline = FALSE))})
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
shiny::runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(data_stock)
stocks_picked
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
