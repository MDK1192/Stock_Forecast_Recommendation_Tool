runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
=======
View(data_fc_train)
View(trace_0)
View(trace_train)
trace_train <- subset(data_fc, !(data_fc_train$date %in% data_fc$date))
View(trace_train)
trace_train <- subset(data_fc, !(data_fc$date %in% data_fc_train$date))
trace_train <- data.frame(date=index(data_fc), coredata(data_fc[,6]))
View(trace_train)
View(trace_0)
trace_train <- subset(trace_0, !(trace_train$date %in% trace_0$date))
View(trace_train)
View(trace_0)
View(trace_train)
View(trace_0)
trace_train <- data.frame(date=index(data_fc), coredata(data_fc[,6]))
View(trace_train)
View(trace_0)
trace_train$date %in% trace_0$date
trace_0$date %in% trace_train$date
trace_train <- subset(trace_0, !(trace_0$date %in% trace_train$date))
View(trace_train)
trace_train <- data.frame(date=index(data_fc), coredata(data_fc[,6]))
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(trace_train)
View(trace_0)
trace_train <- anti_join(trace_train, trace_0)
View(trace_0)
View(trace_train)
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(trace_0)
View(trace_train)
View(trace_0)
View(trace_train)
runApp()
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
anti_join(data_fc, data_fc_train)
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
anti_join(data_fc, data_fc_train)
d <- anti_join(data_fc, data_fc_train)
anti_join(as.data.frame(data_fc), as.data.frame(data_fc_train))
anti_join(as.data.frame(data_fc), as.data.frame(data_fc_train))
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(acc_fc_meanf)
accuracy(fc_meanf[1:length(train_ts[,7])], train_ts[,7])
fc_meanf[1:length(train_ts[,7])]
length(train_ts[,7])
nrow(train_ts[,7])
train_ts[,7]
View(train_ts)
View(acc_fc_meanf)
acc_fc_meanf
acc_fc_meanfaccuracy(naive(train,h=n)$mean, AEY$AEY.Adjusted[(length(AEY$AEY.Adjusted) - (n-1)) :length(AEY$AEY.Adjusted)])
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
ets(data_fc_train[,7]) %>% forecast(h = input$horizonslider)$mean
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(acc_df)
View(acc_fc_arima)
View(acc_fc_arima)
acc_df <- rbind(acc_fc_meanf, acc_fc_naive, acc_fc_snaive, acc_fc_rwf, acc_fc_ses,
acc_fc_holt, acc_fc_splinef, acc_fc_thetaf, acc_fc_ets, acc_fc_tbats,
acc_fc_arima, acc_fc_nnetar)
View(acc_df)
acc_df <- as.data.frame(rbind(acc_fc_meanf, acc_fc_naive, acc_fc_snaive, acc_fc_rwf, acc_fc_ses,
acc_fc_holt, acc_fc_splinef, acc_fc_thetaf, acc_fc_ets, acc_fc_tbats,
acc_fc_arima, acc_fc_nnetar))
acc_df$Model <- c("meanf", "naive", "snaive", "rwf","ses", "holt","splinef","thetaf", "ets", "tbats", "autoarima", "nnetar")
View(acc_df)
names(acc_df)
acc_df <- acc_df[, c("Model","ME","RMSE","MAE","MPE","MAPE")]
View(acc_fc_arima)
View(acc_df)
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
row.names(acc_df)
row.names(acc_df) <- c("meanf", "naive", "snaive", "rwf","ses", "holt","splinef","thetaf", "ets", "tbats", "autoarima", "nnetar")
row.names(acc_df)
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
top_scores_RMSE <- order(acc_df$RMSE)
top_scores_RMSE <- acc_df$RMSE[order(acc_df$RMSE)]
top_scores_RMSE <- data.frame(acc_df$RMSE[order(acc_df$RMSE)])
View(top_scores_RMSE)
top_scores_RMSE <- data.frame(acc_df[order(acc_df$RMSE),])
View(top_scores_RMSE)
top_scores_RMSE <- data.frame(acc_df[order(acc_df$RMSE),])$RMSE
top_scores_RMSE <- data.frame(acc_df[order(acc_df$RMSE),])[,2]
top_scores_RMSE <- data.frame(acc_df[order(acc_df$RMSE),])
View(top_scores_RMSE)
View(top_scores_RMSE)
models <- row.names(top_scores_RMSE[1:3,])
for(i in 1: length(multiplier)){
print(i)
}
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
paste0("fc_",models[i])
get(paste0("fc_",models[i]), envir = .GlobalEnv)
get(paste0("fc_",models[i]))
ensemble_fc <- seq(0, 1, length(fc_meanf))
ensemble_fc <- seq(0, 1, length(fc_meanf))
ensemble_fc <- seq(0, 1, 50
ensemble_fc <- seq(0, 1, 50)
ensemble_fc <- seq(0, 1, 50)
ensemble_fc <- seq(1, 50)
ensemble_fc <- seq(0 ,1, 50)
rep(0, 50)
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
model_fc <- as.numeric(get(paste0("fc_",models[i])))
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
ensemble_fc
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
ensemble_fc + model_fc_weighted
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
fc_ets <- ets(data_fc_train[,7]) %>% forecast(h = input$horizonslider)$mean
fc_ets <- ets(data_fc_train[,7]) %>% forecast(h = input$horizonslider)
str(fc_ets)
fc_ets <- ets(data_fc_train[,7]) %>% forecast(h = input$horizonslider)[1]
fc_ets <- ets(data_fc_train[,7]) %>% forecast(h = input$horizonslider)[1]
fc_ets <- ets(data_fc_train[,7]) %>% forecast(h = input$horizonslider)[[1]]
fc_ets <- ets(data_fc_train[,7]) %>% forecast(h = input$horizonslider)
fc_ets$mean
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(data_plot)
View(data_plot)
plot_ly(data_plot, x = ~Date, y = ~MACD, type = 'scatter', mode = 'lines',
line = list(color = "rgb(0, 0, 0)")) %>% layout(title = "Date", xaxis = list(title = "Date", zeroline = FALSE), yaxis = list(title = "Price", zeroline = FALSE))
plot_ly(data_plot, x = ~Date, y = ~MACD, type = 'scatter', mode = 'lines',
line = list(color = "rgb(0, 0, 0)"))
plot_ly(data_plot, x = ~Date, y = ~MACD, type = 'scatter', mode = 'lines'))
plot_ly(data_plot, x = ~Date, y = ~MACD, type = 'scatter', mode = 'lines')
View(data_plot)
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
data_plot$MACD[is.na(data_plot$MACD)] <- 0
View(data_plot)
View(data_plot)
plot_ly(data_plot, x = ~Date, y = ~MACD, type = 'scatter', mode = 'lines',
line = list(color = "rgb(0, 0, 0)")) %>% layout(title = "Date", xaxis = list(title = "Date", zeroline = FALSE), yaxis = list(title = "Price", zeroline = FALSE))})
output$plotIndRSI <- renderPlotly({plot_ly(data_plot, x = ~Date, y = ~RSI, type = 'scatter', mode = 'lines',
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(data_plot)
data_plot$MACD <- MACD(data_plot$Adjusted, nFast = 12, nSlow = 26)
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(data_plot)
ggplot(data_plot, aes(x=Date, y= MACD)) + geom_line()
ggplot(data_plot, aes(x=Date, y= MACD)) + geom_line()
ggplot(data_plot, aes(x=Date, y= MACD)) + geom_line()
data_plot$MACD[is.na(data_plot$MACD)] <- 0
data_plot$MACD[is.na(data_plot$MACD)] <- 0
ggplot(data_plot, aes(x=Date, y= MACD)) + geom_line()
View(data_plot)
length(MACD)
nrow(MACD)
length(data_plot$MACD)
nrow(data_plot)
MACD <- MACD(data_plot$Adjusted)
View(MACD)
MACD(data_plot$Adjusted)[,1]
data_plot$MACD <- MACD(data_plot$Adjusted)[,1]
names(data_plot) <- c("Date", "Adjusted", "RSI", "MACD")
output$plotIndCore <- renderPlotly({plot_ly(data_plot, x = ~Date, y = ~Adjusted, type = 'scatter', mode = 'lines',
line = list(color = "rgb(0, 0, 0)")) %>% layout(title = "Date", xaxis = list(title = "Date", zeroline = FALSE), yaxis = list(title = "Price", zeroline = FALSE))})
output$plotIndMACD <- renderPlotly({plot_ly(data_plot, x = ~Date, y = ~MACD, type = 'scatter', mode = 'lines',
line = list(color = "rgb(0, 0, 0)")) %>% layout(title = "Date", xaxis = list(title = "Date", zeroline = FALSE), yaxis = list(title = "Price", zeroline = FALSE))})
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
shiny::runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
View(data_stock)
stocks_picked
runApp('GitHub/Stock_Forecast_Recommendation_Tool')
>>>>>>> cc134023b45a0e80d598f76709b4430b2b3df5d8
shiny::runApp()
runApp()
runApp()
runApp()
cbind(index(data_stock), data_stock)
index(data_stock)
data_stock_overview <- as.data.frame(data_stock)
View(data_stock_overview)
cbind(index(data_stock), data_stock_overview)
data_stock_overview <- cbind(index(data_stock), data_stock_overview)
View(data_stock_overview)
names(data_stock_overview[,1]) <- "Date"
View(data_stock_overview)
names(data_stock_overview[,1]) <- "Date"
View(data_stock_overview)
View(data_stock_overview)
colnames(data_stock_overview[,1]) <- "Date"
colnames(data_stock_overview[,1]) <- "Date"
colnames(data_stock_overview[,1]) <- "Date"
colnames(data_stock_overview[1]) <- "Date"
View(data_stock_overview)
names(data_stock_overview)[1] <- "Date"
View(data_stock_overview)
runApp('~/GitHub/Sentiment_App_MBB19/SemiStruk_MBB19')
runApp()
runApp()
View(symbols)
View(symbols)
symbols_fiels <<- list(
Anlagenbau <- c("AMAT","KLAC","LRCX"),
Autoteile <- c("ORLY"),
Billig_Gemischtwarenladen <- c("DLTR"),
Biotechnologie <- c("AMGN","BIIB","BMRN","GILD","ILMN","SGEN"),
Computer_Videospiele <- c("ATVI","EA"),
Computer_Einzelhandel <- c("CDW"),
Computerhardware <- c("WDC"),
Computerspiele <- c("TTWO"),
Datenanalyse <- c("VRSK"),
Drogerieprodukte <- c("WBA"),
E_Commerce <- c("JD", "MELI"),
Einzelhandel <- c("FAST", "ROST")
)
#adding symbold from different areas
symbols_fields <<- list(
Anlagenbau <- c("AMAT","KLAC","LRCX"),
Autoteile <- c("ORLY"),
Billig_Gemischtwarenladen <- c("DLTR"),
Biotechnologie <- c("AMGN","BIIB","BMRN","GILD","ILMN","SGEN"),
Computer_Videospiele <- c("ATVI","EA"),
Computer_Einzelhandel <- c("CDW"),
Computerhardware <- c("WDC"),
Computerspiele <- c("TTWO"),
Datenanalyse <- c("VRSK"),
Drogerieprodukte <- c("WBA"),
E_Commerce <- c("JD", "MELI"),
Einzelhandel <- c("FAST", "ROST")
)
for(i in 1:length(symbols_fields)){
print(i)
}
for(i in 1:length(symbols_fields)){
#load stocks after symbols
symbols_Nasdaq <- stockSymbols("NASDAQ")[,c(1:2)]
symbols_Nasdaq <- na.omit(symbols_Nasdaq)
symbols_choice <- symbols_fields[[as.numeric(input$branchen)]]
symbols <- symbols_Nasdaq[symbols_Nasdaq$Symbol %in% symbols_choice,]
}
shiny::runApp()
View(symbols)
View(symbols)
if(input$dates[1] == input$dates[2]){
for (i in 1:length(symbols$Symbol)){
try(getSymbols(symbols$Symbol[i], from = "2017-12-31", to=as.character(Sys.Date()) ,auto.assign = T))}
}
runApp()
View(data_stock)
runApp()
runApp()
View(data_stock_recommend)
View(symbols)
runApp()
runApp()
runApp()
runApp()
stocks_recommendation <- data.frame("Stock" = as.character())
View(stocks_recommendation)
View(stocks_recommendation)
as.character(get(objects()[objects() %in% symbols_choice[k]]))
runApp()
stocks_recommendation <- rbind(stocks_recommendation, as.character(get(objects()[objects() %in% symbols_choice[k]])))
View(stocks_recommendation)
get(objects()[objects() %in% symbols_choice[k]])
objects()[objects() %in% symbols_choice[k]]
stocks_recommendation <- data.frame("Stock" = as.character())
stocks_recommendation <- rbind(stocks_recommendation, objects()[objects() %in% symbols_choice[k]])
View(stocks_recommendation)
runApp()
runApp()
runApp()
View(stocks_recommendation)
runApp()
runApp()
View(stocks_recommendation)
View(stocks_recommendation)
View(stocks_recommendation)
objects()[objects() %in% symbols_choice[k]]
View(stocks_recommendation)
View(stocks_recommendation)
View(stocks_recommendation)
runApp()
View(stocks_recommendation)
as.character(objects()[objects() %in% symbols_choice[k]])
runApp()
View(stocks_recommendation)
View(stocks_recommendation)
runApp()
View(data_stock_recommend)
View(stocks_recommendation)
runApp()
View(stocks_recommendation)
View(symbols)
View(stocks_recommendation)
as.character(objects()[objects() %in% symbols_choice[k]])
type(as.character(objects()[objects() %in% symbols_choice[k]]))
str(as.character(objects()[objects() %in% symbols_choice[k]]))
runApp()
View(stocks_recommendation)
shiny::runApp()
plot_ly(data_plot, x = ~Date, y = ~CCI,type = 'scatter', mode = 'lines',
line = list(color = "rgb(0, 0, 0)"))
runApp()
plot_ly(data_plot, x = ~Date, y = ~CCI,type = 'scatter', mode = 'lines',
line = list(color = "rgb(0, 0, 0)")) %>% layout(title = "Date", xaxis = list(title = "Date", zeroline = FALSE), yaxis = list(title = "Price", zeroline = FALSE))
plot_ly(data_plot, x = ~Date, y = ~CCI,type = 'scatter', mode = 'lines')
data_plot[is.na(data_plot)] <- 0
plot_ly(data_plot, x = ~Date, y = ~CCI,type = 'scatter', mode = 'lines')
View(data_plot)
View(data_plot)
data_plot$CCI
test <- cci(data_plot$Adjusted)
test <- CCI(data_plot$Adjusted)
test <<- CCI(data_plot$Adjusted)
test <- as.vector(CCI(data_plot$Adjusted))
data_plot$CCI <- as.vector(CCI(data_plot$Adjusted))
View(data_plot)
plot_ly(data_plot, x = ~Date, y = ~CCI,type = 'scatter', mode = 'lines')
runApp()
shiny::runApp()
runApp()
View(LRCX)
runApp()
runApp()
View(df_analyst)
View(df_performance)
runApp()
runApp()
runApp()
runApp()
runApp()
View(stocks_recommendation)
ensemble_fc
runApp('~/GitHub/Sentiment_App_MBB19/SemiStruk_MBB19')
runApp('~/GitHub/Sentiment_App_MBB19/SemiStruk_MBB19')
runApp()
runApp()
runApp()
runApp()
View(stocks_recommendation)
runApp()
runApp()
runApp()
runApp()
runApp()
View(data_stock_recommend)
View(data_stock_recommend)
View(symbols)
runApp()
View(stocks_recommendation)
View(stocks_recommendation)
View(stocks_recommendation)
runApp()
View(stocks_recommendation)
View(stocks_recommendation)
View(stocks_recommendation)
View(symbols)
symbols$Name[1]
symbols$Name[2]
as.character(symbols$Name[k])
current_row
View(stocks_recommendation)
runApp()
View(stocks_recommendation)
View(stocks_recommendation)
View(stocks_recommendation)
View(stocks_recommendation)
runApp()
View(stocks_recommendation)
View(stocks_recommendation)
View(stocks_recommendation)
View(stocks_recommendation)
runApp()
View(stocks_recommendation)
View(stocks_recommendation)
View(stocks_recommendation)
runApp()
View(stocks_recommendation)
View(stocks_recommendation)
View(stocks_recommendation)
stocks_recommendation[2] <- current_row
View(stocks_recommendation)
stocks_recommendation[2] <- current_row
View(stocks_recommendation)
runApp()
c
c
runApp()
runApp()
runApp()
stocks_recommendation[,1:5] <- as.character(stocks_recommendation[,1:5])
View(stocks_recommendation)
runApp()
View(stocks_recommendation)
stocks_recommendation[,1] <- as.character(stocks_recommendation[,1])
stocks_recommendation[,2] <- as.character(stocks_recommendation[,2])
stocks_recommendation[,3] <- as.character(stocks_recommendation[,3])
stocks_recommendation[,4] <- as.character(stocks_recommendation[,4])
stocks_recommendation[,5] <- as.character(stocks_recommendation[,5])
View(stocks_recommendation)
runApp()
View(stocks_recommendation)
runApp()
View(df_performance)
df_performance$`5 Day` = substr(df_performance$`5 Day`,1,nchar(df_performance$`5 Day`)-1)
View(df_performance)
df_performance$`5 Day` = substr(as.character(df_performance$`5 Day`),1,nchar(as.character(df_performance$`5 Day`))-1)
View(df_performance)
df_performance$`5 Day` = as.numeric(substr(as.character(df_performance$`5 Day`),1,nchar(as.character(df_performance$`5 Day`))-1))
runApp()
View(df_analyst)
count(df_analyst)
df_analyst$Buy <- as.numeric(df_analyst$Buy)
df_analyst$Buy <- as.numeric(df_analyst$Buy)
df_analyst$Overweight <- as.numeric(df_analyst$Overweight)
df_analyst$Hold <- as.numeric(df_analyst$Hold)
df_analyst$Underweight <- as.numeric(df_analyst$Underweight)
df_analyst$Sell <- as.numeric(df_analyst$Sell)
table(df_analyst)
View(df_analyst)
max(df_analyst)
names(df_analyst[df_analyst==max(df_analyst)])
df_analyst[df_analyst==max(df_analyst)]
df_analyst[,df_analyst==max(df_analyst)]
colnames(df_analyst[,df_analyst==max(df_analyst)])
runApp()
runApp()
df_analyst[,df_analyst==max(df_analyst)]
colnames(df_analyst[,df_analyst==max(df_analyst)])
names(df_analyst[,df_analyst==max(df_analyst)])
df_analyst
max(df_anaylst)
max(df_analyst)
df_analyst[,df_analyst==max(df_analyst)]
name(df_analyst[,df_analyst==max(df_analyst)])
names(df_analyst[,df_analyst==max(df_analyst)])
columns(df_analyst[,df_analyst==max(df_analyst)])
colnames(df_analyst)
colnames(df_anaylst[df_analyst == df_analyst[,df_analyst==max(df_analyst)]])
colnames(df_analyst[df_analyst == df_analyst[,df_analyst==max(df_analyst)]])
colnames(df_analyst[,df_analyst == df_analyst[,df_analyst==max(df_analyst)]])
colnames(df_analyst[,df_analyst == df_analyst[,df_analyst==max(df_analyst)]])
which.max(df_analyst)
names(which.max(df_analyst))
current_expert <- names(which.max(df_analyst))
names(which.max(df_analyst))
which.max(df_analyst)
which.max(df_analyst)
which.max(df_analyst)
runApp()
View(stocks_recommendation)
View(stocks_recommendation)
View(df_analyst)
which.max(df_analyst)
View(df_analyst)
View(df_analyst)
which.max(df_analyst)
View(df_analyst)
View(df_analyst)
which.max(df_analyst)
View(data_stock_overview)
View(stocks_recommendation)
runApp()
View(stocks_recommendation)
View(stocks_recommendation)
View(df_analyst)
current_expert <- names(which.max(df_analyst))
which.max(df_analyst)
View(df_analyst)
View(df_analyst)
df_analyst$Buy <- as.numeric(df_analyst$Buy)
View(df_analyst)
runApp()
View(df_analyst)
View(df_analyst)
View(df_analyst)
current_expert <- names(which.max(df_analyst))
names(which.max(df_analyst))
which.max(df_analyst)
df_analyst
which.max(df_analyst)
runApp()
