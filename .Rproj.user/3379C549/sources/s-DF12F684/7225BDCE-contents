#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(shinydashboard)
library(ggplot2)
library(plotly)
library(xts)
library(zoo)
library(quantmod)
# library(Quandl)
library(forecast)
# #library(RCrawler)
library(DT)
# library(rvest)
# library(data.table)
# library(imputeTS)
# library(tsibble)
# library(TTR)

source("modules/import_data.R")
source("modules/module2.R")
source("modules/module3.R")


ui <- dashboardPage(
    #Header Content
    dashboardHeader(title = "Stock Recommendation Dashboard"),
    #Sidebar Content
    dashboardSidebar(
        sidebarMenu(
            menuItem("Aktien", tabName = "aktien", icon = icon("th")),
            menuItem("Forecast", tabName = "forecast", icon = icon("th")),
            menuItem("Recommendation", tabName = "recommendation", icon = icon("th")),
            menuItem("Trades", tabName = "trades", icon = icon("th")),
            menuItem("Kursindikator", tabName = "kursindikator", icon = icon("th"))
        )
    ),
    #Body Content
    dashboardBody(
        tabItems(
            tabItem(tabName = "aktien",
                    h2("Aktien Uebersicht"),
                    box(width = 12,
                        box(width = 3, dateRangeInput("dates", label = h3("Date range"))),
                        box(width = 6,radioButtons("radio", label = h3("Radio buttons"),
                                     choices = list("Branche 1" = 1, "Branche 2" = 2, "Branche 3" = 3), 
                                     selected = 1)),
                        box(width = 3, actionButton("loadButton", label = "Load Stockdata", width = '100%'))
                    ),
                    box(width = 12,
                        box(width = 8,plotlyOutput("plotStock"),title = "Kursuebersicht grafisch"),
                        box(width = 4,DTOutput("stockOverview"),title = "Aktienuebersicht")
                    ),
                    box(width = 12, DTOutput("stockData"),title = "Kursuebersicht tabellarisch")
            ),
            tabItem(tabName = "forecast",
                    h2("Forecast"),
                    box(width = 12,
                        box(width = 8,sliderInput("horizonslider", label = h3("Horizon"), min = 10, max = 365, value = 50)),
                        box(width = 4,DTOutput("stockOverviewFC"),title = "Aktienuebersicht")),
                    box(width = 12, plotlyOutput("plotforecast"),title = "Forecasts grafisch"),
                    box(width = 12,DTOutput("placeholder4"),title = "Fehlerausgabe")
            ),
            tabItem(tabName = "recommendation",
                    h2("Recommendation"),
                    box(width = 12,DTOutput("placeholder5"),title = "Boersenblog1 tabellarisch"),
                    box(width = 12,DTOutput("placeholder6"),title = "Boersenblog2 tabellarisch"),
                    box(width = 12,DTOutput("placeholder7"),title = "Boersenblog3 tabellarisch")
            ),
            tabItem(tabName = "trades",
                    h2("Trades"),
                    box(width = 12,DTOutput("placeholder8"),title = "Fehlerausgabe")
            ),
            tabItem(tabName = "kursindikator",
                    h2("Kursindikatoren"),
                    tabBox(
                      title = "First tabBox",
                      # The id lets us use input$tabset1 on the server to find the current tab
                      id = "tabset1",
                      tabPanel("Tab1", "Tab content 1"),
                      tabPanel("Tab2", "Tab content 2")
                    )
            )

        )
    )
)

#server/logic content
server <- function(input, output, session) {

  observeEvent(input$loadButton, {
    symbols <- stockSymbols("NASDAQ")[,c(1:2)]
    symbols <- na.omit(symbols)
    symbols <- symbols[1:3,]
    if(input$dates[1] == input$dates[2]){
      for (i in 1:length(symbols$Symbol)){
        try(getSymbols(symbols$Symbol[i], from = "2017-12-31", to=as.character(Sys.Date()) ,auto.assign = T))}
    }
    else{
      for (i in 1:length(symbols$Symbol)){
        try(getSymbols(symbols$Symbol[i], from = as.character(input$dates[1]), to=as.character(input$dates[2]) ,auto.assign = T))}
    }
    data_stock <- AACG
    stocks_picked <<- symbols[symbols$Symbol %in% objects(),]
    output$stockOverview <- renderDataTable(stocks_picked,selection=list(mode="single"), options= list(scrollY = TRUE,pageLength = 5))
    output$stockOverviewFC <- renderDataTable(stocks_picked,selection=list(mode="single"), options= list(scrollY = TRUE,pageLength = 5))
    output$stockData <- renderDataTable(data_stock,options= list(scrollY = TRUE,pageLength = 5))
    output$plotStock <- renderPlotly({
      data_plot <- data.frame("Date"= index(data_stock), "Adjusted" = select(as.data.frame(data_stock),contains("Adjusted")))
      names(data_plot) <- c("Date", "Adjusted")
      plot_ly(data_plot, x = ~Date, y = ~Adjusted, type = 'scatter', mode = 'lines', 
              line = list(color = "rgb(0, 0, 0)")) %>%
        layout(xaxis = list(title = "Date",
                            zeroline = FALSE),
               yaxis = list(title = "Price",
                            zeroline = FALSE))
    })
    #export everything to global env.
    allglobal <- function() {
      lss <- ls(envir = parent.frame())
      for (i in lss) {
        assign(i, get(i, envir = parent.frame()), envir = .GlobalEnv)
      }
    }
    allglobal()
  })
  observeEvent(input$stockOverview_rows_selected, {
    if (stocks_picked$Symbol[input$stockOverview_rows_selected] %in% ls(envir = .GlobalEnv)) {
      data_stock <<- get(stocks_picked$Symbol[input$stockOverview_rows_selected], envir = .GlobalEnv)
      output$stockData <- renderDataTable(data_stock,options= list(scrollY = TRUE,pageLength = 5))
      output$plotStock <- renderPlotly({
        data_plot <- data.frame("Date"= index(data_stock), "Adjusted" = select(as.data.frame(data_stock),contains("Adjusted")))
        names(data_plot) <- c("Date", "Adjusted")
        plot_ly(data_plot, x = ~Date, y = ~Adjusted, type = 'scatter', mode = 'lines', 
                line = list(color = "rgb(0, 0, 0)")) %>%
          layout(xaxis = list(title = "Date",
                              zeroline = FALSE),
                 yaxis = list(title = "Price",
                              zeroline = FALSE))
      })
      } 
  })
  observeEvent(input$stockOverviewFC_rows_selected, {
    if (stocks_picked$Symbol[input$stockOverviewFC_rows_selected] %in% ls(envir = .GlobalEnv)) {
      data_stock <<- get(stocks_picked$Symbol[input$stockOverviewFC_rows_selected], envir = .GlobalEnv)
      output$plotforecast <- renderPlotly({
        data_fc  <- xts(x=data_stock)
        dates <- seq.Date(from=min(index(data_fc)), to=max(index(data_fc)), by="days")
        xts <- xts(x=rep(NA, length(dates)), order.by=dates)
        data_fc <- na.locf(merge(xts, data_fc, join = "left"))
        
        fc_meanf <- meanf(data_fc[,7],h=input$horizonslider)$mean
        fc_naive <- naive(data_fc[,7],h=input$horizonslider)$mean
        fc_snaive <- snaive(data_fc[,7],h=input$horizonslider)$mean
        fc_rwf <- rwf(data_fc[,7],h=input$horizonslider)$mean
        # #fc_croston <- croston(data_fc[,7],h=input$horizonslider)$mean
        # #fc_stlf <- stlf(data_fc[,7],h=input$horizonslider)$mean
        fc_ses <- ses(data_fc[,7],h=input$horizonslider)$mean
        fc_holt <- holt(data_fc[,7],h=input$horizonslider)$mean
        # #fc_hw <- hw(data_fc[,7],h=input$horizonslider)$mean
        #fc_splinef <- splinef(data_fc[,7],h=input$horizonslider)$mean
        fc_thetaf <- thetaf(data_fc[,7],h=input$horizonslider)$mean
        # fc_ets <- ets(data_fc[,7]) %>% forecast(h = input$horizonslider)
        # fc_tbats <- tbats(data_fc[,7]) %>% forecast(h = input$horizonslider)
        # fc_arima <- auto.arima(data_fc[,7]) %>% forecast(h = input$horizonslider)
        
        dates <- seq.Date(from=max(index(data_fc)) + 1, to=max(index(data_fc)) + input$horizonslider, by="days")
        
        fc_meanf_xts <- xts(x=fc_meanf, order.by=dates)
        fc_naive_xts <- xts(x=fc_naive, order.by=dates)
        fc_snaive_xts <- xts(x=fc_snaive, order.by=dates)
        fc_rwf_xts <- xts(x=fc_rwf, order.by=dates)
        #fc_croston_xts <- xts(x=fc_croston, order.by=dates)
        #fc_stlf_xts <- xts(x=fc_stlf, order.by=dates)
        fc_ses_xts <- xts(x=fc_ses, order.by=dates)
        fc_holt_xts <- xts(x=fc_holt, order.by=dates)
        # #fc_hw_xts <- xts(x=fc_hw, order.by=dates)
        #fc_splinef_xts <- xts(x=fc_splinef, order.by=dates)
        fc_thetaf_xts <- xts(x=fc_thetaf, order.by=dates)
        # fc_ets_xts <- xts(x=fc_ets$mean, order.by=dates)
        # fc_tbats_xts <- xts(x=fc_tbats$mean, order.by=dates)
        # fc_arima_xts <- xts(x=fc_arima$mean, order.by=dates)
        
        trace_0 <- data.frame(date=index(data_fc), coredata(data_fc[,7]))
        trace_1 <- data.frame(date=index(fc_meanf_xts), coredata(fc_meanf_xts))
        trace_2 <- data.frame(date=index(fc_naive_xts), coredata(fc_naive_xts))
        trace_3 <- data.frame(date=index(fc_snaive_xts), coredata(fc_snaive_xts))
        trace_4 <- data.frame(date=index(fc_rwf_xts), coredata(fc_rwf_xts))
        #trace_5 <- data.frame(date=index(fc_croston_xts), coredata(fc_croston_xts))
        #trace_6 <- data.frame(date=index(fc_stlf_xts), coredata(fc_stlf_xts))
        trace_7 <- data.frame(date=index(fc_ses_xts), coredata(fc_ses_xts))
        trace_8 <- data.frame(date=index(fc_holt_xts), coredata(fc_holt_xts))
        # #trace_9 <- data.frame(date=index(fc_hw_xts), coredata(fc_hw_xts))
        #trace_10 <- data.frame(date=index(fc_splinef_xts), coredata(fc_splinef_xts))
        trace_11 <- data.frame(date=index(fc_thetaf_xts), coredata(fc_thetaf_xts))
        # trace_12 <- data.frame(date=index(fc_ets_xts), coredata(fc_ets_xts))
        # trace_13 <- data.frame(date=index(fc_tbats_xts), coredata(fc_tbats_xts))
        # trace_14 <- data.frame(date=index(fc_arima_xts), coredata(fc_arima_xts))

        x <- seq.Date(from=min(index(data_fc)), to=max(index(fc_meanf_xts)), by="days")
        
        data_fc_merged <- data.frame("date"=x)
        data_fc_merged <- merge(data_fc_merged, trace_0, by="date", all.x = TRUE)
        data_fc_merged <- merge(data_fc_merged, trace_1, by="date", all.x = TRUE)
        data_fc_merged <- merge(data_fc_merged, trace_2, by="date", all.x = TRUE)
        data_fc_merged <- merge(data_fc_merged, trace_3, by="date", all.x = TRUE)
        data_fc_merged <- merge(data_fc_merged, trace_4, by="date", all.x = TRUE)
        #data_fc_merged <- merge(data_fc_merged, trace_5, by="date", all.x = TRUE)
        #data_fc_merged <- merge(data_fc_merged, trace_6, by="date", all.x = TRUE)
        data_fc_merged <- merge(data_fc_merged, trace_7, by="date", all.x = TRUE)
        data_fc_merged <- merge(data_fc_merged, trace_8, by="date", all.x = TRUE)
        # #data_fc_merged <- merge(data_fc_merged, trace_9, by="date", all.x = TRUE)
        # data_fc_merged <- merge(data_fc_merged, trace_10, by="date", all.x = TRUE)
        data_fc_merged <- merge(data_fc_merged, trace_11, by="date", all.x = TRUE)
        # data_fc_merged <- merge(data_fc_merged, trace_12, by="date", all.x = TRUE)
        # data_fc_merged <- merge(data_fc_merged, trace_13, by="date", all.x = TRUE)
        # data_fc_merged <- merge(data_fc_merged, trace_14, by="date", all.x = TRUE)

        #"stlf",
        #"croston","hw","ses", "holt", 
        #"splinef","thetaf","ets", "tbats", "autoarima"
        names(data_fc_merged) <- c("date", "stock", "meanf", "naive", "snaive", 
        "rwf","ses", "holt","thetaf")
        
        fig <- plot_ly(data_fc_merged, x=~date, y = ~stock, name = 'value', type = 'scatter', mode = 'lines')
        fig <- fig %>% add_trace(y = ~meanf, name = 'meanf', mode = 'lines')
        fig <- fig %>% add_trace(y = ~naive, name = 'naive', mode = 'lines')
        fig <- fig %>% add_trace(y = ~snaive, name = 'snaive', mode = 'lines')
        fig <- fig %>% add_trace(y = ~rwf, name = 'rwf', mode = 'lines')
        #fig <- fig %>% add_trace(y = ~croston, name = 'croston', mode = 'lines')
        #fig <- fig %>% add_trace(y = ~stlf, name = 'stlf', mode = 'lines')
        fig <- fig %>% add_trace(y = ~ses, name = 'ses', mode = 'lines')
        fig <- fig %>% add_trace(y = ~holt, name = 'holt', mode = 'lines')
        # fig <- fig %>% add_trace(y = ~hw, name = 'hw', mode = 'lines')
        # fig <- fig %>% add_trace(y = ~splinef, name = 'splinef', mode = 'lines')
        fig <- fig %>% add_trace(y = ~thetaf, name = 'thetaf', mode = 'lines')
        # fig <- fig %>% add_trace(y = ~ets, name = 'ets', mode = 'lines')
        # fig <- fig %>% add_trace(y = ~tbats, name = 'tbats', mode = 'lines')
        # fig <- fig %>% add_trace(y = ~autoarima, name = 'autoarima', mode = 'lines')
        fig
      })
    } 
    

    
    
    
    
    
    
    
    
    
    

  })

}

shinyApp(ui, server)